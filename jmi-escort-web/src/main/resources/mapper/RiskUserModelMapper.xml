<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jd.jmi.escort.dao.RiskUserModel">
    <resultMap id="BaseResultMap" type="riskUserModel">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="modelName" property="modelName"/>
        <result column="orderType" property="orderType"/>
        <result column="ruleData" property="ruleData"/>
        <result column="type" property="type"/>
        <result column="status" property="status"/>
        <result column="created" property="created"/>
        <result column="modified" property="modified"/>
        <result column="modifyUser" property="modifyUser"/>
        <result column="snapId" property="snapId" jdbcType="BIGINT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, modelName, orderType, ruleData, type,status, created, modified, modifyUser,snapId
  </sql>
    <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from risk_user_model
        where id = #{id} and status>-1
    </select>
    <!--<select id="getAll" resultMap="BaseResultMap">-->
        <!--select-->
        <!--<include refid="Base_Column_List"/>-->
        <!--from risk_user_model-->
        <!--where status>-1-->
    <!--</select>-->
    <select id="getEnabledByOrderType" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from risk_user_model
        where status=1 and orderType=#{orderType}
    </select>
    <delete id="deleteById" parameterType="java.lang.Long">
    delete from risk_user_model
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="riskUserModel" useGeneratedKeys="true" keyProperty="id">
    insert into risk_user_model ( modelName, orderType,
      ruleData, status, created, 
      modified, modifyUser,snapId)
    values (#{modelName}, #{orderType},
      #{ruleData}, #{status}, now(),
      now(), #{modifyUser},#{snapId})
  </insert>

    <update id="updateById" parameterType="riskUserModel">
    update risk_user_model
    set modelName = #{modelName},
      ruleData = #{ruleData},
      modified = now(),
      modifyUser = #{modifyUser},
      snapId = #{snapId}
    where id = #{id}
  </update>

    <update id="updateStatusById" parameterType="riskUserModel">
        update risk_user_model
        set status = #{status},
        modified = now(),
        modifyUser = #{modifyUser}
        where id = #{id}
    </update>

    <select id="queryCount" resultType="int" parameterType="riskUserModel" >
        select count(1)
        from risk_user_model
        <include refid="queryDynamic" />
    </select>
    <select id="queryList" resultMap="BaseResultMap" parameterType="riskUserModel" >
        select
        <include refid="Base_Column_List" />
        from risk_user_model
        <include refid="queryDynamic" />
        order by modified desc
        limit #{startRow},#{pageSize}
    </select>
    <sql id="queryDynamic">
        <where>
            1=1
            <if test="modelName != null and modelName!=''">
                and modelName like CONCAT(CONCAT('%', #{modelName}), '%')
            </if>
            <if test="status != null">
                and status=#{status}
            </if>
            <if test="status == null">
                and status>-1
            </if>
            <if test="orderType != null and orderType>0" >
                and orderType=#{orderType}
            </if>
        </where>
    </sql>
</mapper>