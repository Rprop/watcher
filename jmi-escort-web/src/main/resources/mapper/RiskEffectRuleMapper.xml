<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jd.jmi.escort.dao.RiskEffectRuleMapper">
    <resultMap id="BaseResultMap" type="riskEffectRule">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="orderType" property="orderType"/>
        <result column="effectiveDate" property="effectiveDate"/>
        <result column="expiredDate" property="expiredDate"/>
        <result column="level" property="level"/>
        <result column="rulePri" property="rulePri"/>
        <result column="region" property="region"/>
        <result column="userModelIds" property="userModelIds"/>
        <result column="decideId" property="decideId"/>
        <result column="executeRule" property="executeRule"/>
        <result column="effectTip" property="effectTip"/>
        <result column="status" property="status"/>
        <result column="releaseType" property="releaseType"/>
        <result column="processType" property="processType"/>
        <result column="created" property="created"/>
        <result column="modified" property="modified"/>
        <result column="modifyUser" property="modifyUser"/>
        <result column="snapId" property="snapId" jdbcType="BIGINT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, name, orderType, effectiveDate, expiredDate, level, rulePri, region, userModelIds, 
    decideId, executeRule, effectTip, status,releaseType,processType, created, modified, modifyUser,snapId
  </sql>
    <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from risk_effect_rule
        where id = #{id}
    </select>
    <!--<select id="getAll" resultMap="BaseResultMap">-->
    <!--select <include refid="Base_Column_List" />-->
    <!--from risk_effect_rule-->
    <!--where status>-1-->
    <!--</select>-->
    <select id="getEnabledByOrderType" resultMap="BaseResultMap" parameterType="riskEffectRule">
        select
        <include refid="Base_Column_List"/>
        from risk_effect_rule
        <include refid="queryDynamic"/>
        order by rulePri desc,modified desc limit 10000
    </select>
    <select id="countByDecideId" resultType="java.lang.Integer" parameterType="java.lang.Long">
        select count(1)
        from risk_effect_rule
        where decideId = #{decideId} and status > -1
  </select>
    <select id="getByOrderType" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from risk_effect_rule
        where orderType=#{orderType} and status>-1 limit 10000
    </select>
    <select id="getEnableRuleByDecideId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from risk_effect_rule
        where status=1 and decideId=#{decideId} limit 10000
    </select>
    <select id="getRuleByDecideId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from risk_effect_rule
        where status>-1 and decideId=#{decideId} limit 10000
    </select>
    <delete id="deleteById" parameterType="java.lang.Long">
    delete from risk_effect_rule
    where id = #{id}
  </delete>
    <insert id="insert" parameterType="riskEffectRule" useGeneratedKeys="true" keyProperty="id">
    insert into risk_effect_rule ( name, orderType,
      effectiveDate, expiredDate, level, 
      rulePri, region, userModelIds, 
      decideId, executeRule,
      effectTip, status, releaseType ,processType,created,
      modified, modifyUser,snapId)
    values (#{name}, #{orderType},
      #{effectiveDate}, #{expiredDate}, #{level}, 
      #{rulePri}, #{region}, #{userModelIds}, 
      #{decideId}, #{executeRule},
      #{effectTip}, #{status},#{releaseType},#{processType}, now(),
      now(), #{modifyUser}, #{snapId})
  </insert>

    <update id="updateById" parameterType="riskEffectRule">
    update risk_effect_rule
    set name = #{name},
      orderType = #{orderType},
      effectiveDate = #{effectiveDate},
      expiredDate = #{expiredDate},
      level = #{level},
      rulePri = #{rulePri},
      region = #{region},
      userModelIds = #{userModelIds},
      decideId = #{decideId},
      executeRule = #{executeRule},
      effectTip = #{effectTip},
      releaseType = #{releaseType},
      processType = #{processType},
      modified = now(),
      modifyUser = #{modifyUser},
      snapId = #{snapId}
    where id = #{id}
  </update>
    <update id="updateStatusById" parameterType="riskEffectRule">
        update risk_effect_rule
        set status = #{status},
        modified = now(),
        modifyUser = #{modifyUser}
        where id = #{id}
  </update>

    <select id="queryCount" resultType="int" parameterType="riskEffectRule">
        select count(1)
        from risk_effect_rule
        <include refid="queryDynamic"/>
    </select>
    <select id="queryList" resultMap="BaseResultMap" parameterType="riskEffectRule">
        select
        <include refid="Base_Column_List"/>
        from risk_effect_rule
        <include refid="queryDynamic"/>
        order by modified desc
        limit #{startRow},#{pageSize}
    </select>
    <sql id="queryDynamic">
        <where>
            1=1
            <if test="name != null and name!=''">
                and name like CONCAT(CONCAT('%', #{name}), '%')
            </if>
            <if test="status != null">
                and status=#{status}
            </if>
            <if test="status == null">
                and status>-1
            </if>
            <if test="orderType != null and orderType>0">
                and orderType=#{orderType}
            </if>
            <if test="processType != null and processType>0">
                and processType=#{processType}
            </if>
        </where>
    </sql>
</mapper>